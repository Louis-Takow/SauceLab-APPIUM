name: Appium Tests with WebdriverIO

on:
  push:
    branches: [main, feature/*]
  pull_request:
    branches: [main, feature/*]

jobs:
  test:
    runs-on: ubuntu-latest  # Use Windows for compatibility

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set Up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'

      - name: Install Dependencies
        run: npm install

      - name: Set Up Java & Android SDK
        uses: android-actions/setup-android@v3

      - name: Install Required Android SDK Components
        run: |
          echo "Installing required SDK components..."
          sdkmanager --install "platform-tools" "emulator" "cmdline-tools;latest" "system-images;android-30;google_apis_playstore;x86_64"
          echo "SDK setup complete."

      - name: Start Appium Server
        run: |
          npm install -g appium
          appium --version
          Start-Process -NoNewWindow -FilePath "npx" -ArgumentList "appium --port 4723 --log appium.log" -PassThru

      - name: Set Up Android Emulator
        run: |
          echo "Setting up AVD..."
          $ANDROID_SDK_ROOT="$env:ANDROID_HOME"
          $AVD_NAME="test-emulator"
          
          # Check if AVD already exists
          if (!(avdmanager list avd | Select-String $AVD_NAME)) {
            echo "Creating AVD..."
            avdmanager create avd -n $AVD_NAME -k "system-images;android-30;google_apis_playstore;x86_64" --device "pixel_4"
          } else {
            echo "AVD already exists, skipping creation."
          }

          echo "Starting AVD..."
          $emulatorPath = "$ANDROID_SDK_ROOT/emulator/emulator.exe"
          if (Test-Path $emulatorPath) {
            Start-Process -NoNewWindow -FilePath $emulatorPath -ArgumentList "-avd $AVD_NAME -no-audio -no-window -gpu swiftshader_indirect -no-boot-anim" -PassThru
          } else {
            echo "Emulator binary not found!"
            exit 1
          }

      - name: Wait for Emulator to Start
        run: |
          echo "Waiting for emulator to start..."
          adb start-server
          $retries = 10
          $counter = 0
          while ($counter -lt $retries) {
            $devices = adb devices | Select-String "emulator"
            if ($devices) { break }
            Start-Sleep -Seconds 15
            $counter++
          }
          adb wait-for-device shell getprop sys.boot_completed | Select-String "1" || Start-Sleep -Seconds 60
          adb devices

      - name: Restart ADB and Verify Emulator
        run: |
          adb kill-server
          adb start-server
          adb devices

      - name: Run WebdriverIO Tests
        run: npm test

      - name: Upload Test Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-reports
          path: test-results/

      - name: Stop Emulator
        run: adb -s emulator-5554 emu kill
